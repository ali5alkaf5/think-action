"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const create_service_1 = __importDefault(require("../../services/users/create.service"));
const get_one_service_1 = __importDefault(require("../../services/users/get-one.service"));
const get_all_supporter_service_1 = __importDefault(require("../../services/users/get-all-supporter.service"));
const support_another_service_1 = __importDefault(require("../../services/users/support-another.service"));
const user_controller_1 = __importDefault(require("../../controllers/user.controller"));
const user_repository_1 = require("../../repositories/user.repository");
const auth_controller_1 = __importDefault(require("../../controllers/auth.controller"));
const auth_middleware_1 = require("../../middleware/auth.middleware");
const update_my_password_service_1 = __importDefault(require("../../services/users/update-my-password.service"));
const get_all_supporting_service_1 = __importDefault(require("../../services/users/get-all-supporting.service"));
const get_current_user_request_service_1 = __importDefault(require("../../services/users/get-current-user-request.service"));
const get_current_user_notification_service_1 = __importDefault(require("../../services/users/get-current-user-notification.service"));
const update_current_user_service_1 = __importDefault(require("../../services/users/update-current-user.service"));
const unsupport_another_service_1 = __importDefault(require("../../services/users/unsupport-another.service"));
const accept_support_request_service_1 = __importDefault(require("../../services/users/accept-support-request.service"));
const reject_support_request_service_1 = __importDefault(require("../../services/users/reject-support-request.service"));
const search_service_1 = __importDefault(require("../../services/users/search.service"));
const get_history_service_1 = __importDefault(require("../../services/users/get-history.service"));
const delete_history_service_1 = __importDefault(require("../../services/users/delete-history.service"));
const multer_1 = __importDefault(require("multer"));
const notification_repository_1 = require("../../repositories/notification.repository");
const get_image_service_1 = __importDefault(require("../../services/images/get-image.service"));
const storage = multer_1.default.memoryStorage();
const upload = (0, multer_1.default)({ storage });
const router = (0, express_1.Router)();
const getImage = new get_image_service_1.default();
const userRepository = new user_repository_1.UserRepository();
const notificationRepository = new notification_repository_1.NotificationRepository();
const createUser = new create_service_1.default(userRepository);
const updateMyPasswordUser = new update_my_password_service_1.default(userRepository);
const getOneUser = new get_one_service_1.default(userRepository);
const getAllSupporter = new get_all_supporter_service_1.default(userRepository);
const getAllSupporting = new get_all_supporting_service_1.default(userRepository);
const getCurrentUserRequest = new get_current_user_request_service_1.default(userRepository);
const getCurrentUserNotification = new get_current_user_notification_service_1.default(userRepository);
const updateCurrentUser = new update_current_user_service_1.default(userRepository);
const supportAnotherUser = new support_another_service_1.default(userRepository);
const unsupportAnotherUser = new unsupport_another_service_1.default(userRepository);
const acceptSupportRequest = new accept_support_request_service_1.default(userRepository, notificationRepository);
const rejectSupportRequest = new reject_support_request_service_1.default(userRepository, notificationRepository);
const searchUser = new search_service_1.default(userRepository);
const getHistory = new get_history_service_1.default(userRepository);
const deleteHistory = new delete_history_service_1.default(userRepository);
const userController = new user_controller_1.default(createUser, updateMyPasswordUser, getOneUser, getAllSupporter, getAllSupporting, getCurrentUserRequest, getCurrentUserNotification, updateCurrentUser, supportAnotherUser, unsupportAnotherUser, acceptSupportRequest, rejectSupportRequest, searchUser, getHistory, deleteHistory, getImage);
const authController = new auth_controller_1.default(createUser, userRepository);
router.post('/register', (req, res, next) => userController.createUser(req, res, next));
router.post('/login', (req, res, next) => authController.login(req, res, next));
router.get('/get', auth_middleware_1.verifyUser, (req, res, next) => userController.getAuthUser(req, res, next));
router.post('/support', auth_middleware_1.verifyUser, (req, res, next) => userController.supportAnotherUser(req, res, next));
router.post('/unsupport', auth_middleware_1.verifyUser, (req, res, next) => userController.unsupportAnotherUser(req, res, next));
router.post('/request/accept', auth_middleware_1.verifyUser, (req, res, next) => userController.acceptSupportRequest(req, res, next));
router.post('/request/reject', auth_middleware_1.verifyUser, (req, res, next) => userController.rejectSupportRequest(req, res, next));
router.patch('/updateMyPassword', auth_middleware_1.verifyUser, (req, res, next) => userController.updateMyPassword(req, res, next));
router.get('/request', auth_middleware_1.verifyUser, (req, res, next) => userController.getCurrentUserRequest(req, res, next));
router.get('/notification', auth_middleware_1.verifyUser, (req, res, next) => userController.getCurrentUserNotification(req, res, next));
router.get('/search', auth_middleware_1.verifyUser, (req, res, next) => userController.searchUser(req, res, next));
router.get('/history', auth_middleware_1.verifyUser, (req, res, next) => userController.getHistory(req, res, next));
router.get('/:id', auth_middleware_1.verifyUser, (req, res, next) => userController.getOneUser(req, res, next));
router.get('/:id/supporter', auth_middleware_1.verifyUser, (req, res, next) => userController.getAllSupporter(req, res, next));
router.get('/:id/supporting', auth_middleware_1.verifyUser, (req, res, next) => userController.getAllSupporting(req, res, next));
router.patch('/', auth_middleware_1.verifyUser, upload.single('photo'), (req, res, next) => userController.updateCurrentUser(req, res, next));
router.delete('/history', auth_middleware_1.verifyUser, (req, res, next) => userController.deleteHistory(req, res, next));
exports.default = router;
