"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_middleware_1 = require("../../middleware/auth.middleware");
const post_repository_1 = require("../../repositories/post.repository");
const create_resolution_service_1 = __importDefault(require("../../services/posts/create-resolution.service"));
const post_controller_1 = __importDefault(require("../../controllers/post.controller"));
const create_weekly_goals_service_1 = __importDefault(require("../../services/posts/create-weekly-goals.service"));
const create_complete_goals_service_1 = __importDefault(require("../../services/posts/create-complete-goals.service"));
const update_resolution_service_1 = __importDefault(require("../../services/posts/update-resolution.service"));
const update_weekly_goals_service_1 = __importDefault(require("../../services/posts/update-weekly-goals.service"));
const update_complete_goals_service_1 = __importDefault(require("../../services/posts/update-complete-goals.service"));
const like_service_1 = __importDefault(require("../../services/posts/like.service"));
const unlike_service_1 = __importDefault(require("../../services/posts/unlike.service"));
const delete_service_1 = __importDefault(require("../../services/posts/delete.service"));
const get_all_service_1 = __importDefault(require("../../services/posts/get-all.service"));
const get_one_service_1 = __importDefault(require("../../services/posts/get-one.service"));
const get_all_like_service_1 = __importDefault(require("../../services/posts/get-all-like.service"));
const get_monthly_report_service_1 = __importDefault(require("../../services/posts/get-monthly-report.service"));
const get_year_report_service_1 = __importDefault(require("../../services/posts/get-year-report.service"));
const multer_1 = __importDefault(require("multer"));
const storage = multer_1.default.memoryStorage();
const upload = (0, multer_1.default)({ storage });
const router = (0, express_1.Router)();
const postRepository = new post_repository_1.PostRepository();
const getAllPost = new get_all_service_1.default(postRepository);
const getOnePost = new get_one_service_1.default(postRepository);
const getAllLikePost = new get_all_like_service_1.default(postRepository);
const createResolution = new create_resolution_service_1.default(postRepository);
const createWeeklyGoals = new create_weekly_goals_service_1.default(postRepository);
const createCompleteGoals = new create_complete_goals_service_1.default(postRepository);
const updateResolutions = new update_resolution_service_1.default(postRepository);
const updateWeeklyGoals = new update_weekly_goals_service_1.default(postRepository);
const updateCompleteGoals = new update_complete_goals_service_1.default(postRepository);
const likePost = new like_service_1.default(postRepository);
const unlikePost = new unlike_service_1.default(postRepository);
const getMonthlyReport = new get_monthly_report_service_1.default(postRepository);
const getYearReport = new get_year_report_service_1.default(postRepository);
const deletePost = new delete_service_1.default(postRepository);
const postController = new post_controller_1.default(getAllPost, getOnePost, getAllLikePost, createResolution, createWeeklyGoals, createCompleteGoals, updateResolutions, updateWeeklyGoals, updateCompleteGoals, likePost, unlikePost, getMonthlyReport, getYearReport, deletePost);
router.get('/', auth_middleware_1.verifyUser, (req, res, next) => postController.getAllPost(req, res, next));
router.get('/monthly', auth_middleware_1.verifyUser, (req, res, next) => postController.getMonthlyReport(req, res, next));
router.get('/yearly', auth_middleware_1.verifyUser, (req, res, next) => postController.getYearReport(req, res, next));
router.get('/:id', auth_middleware_1.verifyUser, (req, res, next) => postController.getOnePost(req, res, next));
router.get('/:id/like', auth_middleware_1.verifyUser, (req, res, next) => postController.getAllLikePost(req, res, next));
router.post('/resolutions', auth_middleware_1.verifyUser, upload.array('photo[]'), (req, res, next) => postController.createResolution(req, res, next));
router.post('/weeklyGoals', auth_middleware_1.verifyUser, upload.array('photo[]'), (req, res, next) => postController.createWeeklyGoals(req, res, next));
router.post('/completeGoals', auth_middleware_1.verifyUser, upload.array('photo[]'), (req, res, next) => postController.createCompleteGoals(req, res, next));
router.post('/like', auth_middleware_1.verifyUser, (req, res, next) => postController.likePost(req, res, next));
router.post('/unlike', auth_middleware_1.verifyUser, (req, res, next) => postController.unlikePost(req, res, next));
router.patch('/:id/resolutions', auth_middleware_1.verifyUser, upload.array('photo[]'), (req, res, next) => postController.updateResolutions(req, res, next));
router.patch('/:id/weeklyGoals', auth_middleware_1.verifyUser, upload.array('photo[]'), (req, res, next) => postController.updateWeeklyGoals(req, res, next));
router.patch('/:id/completeGoals', auth_middleware_1.verifyUser, upload.array('photo[]'), (req, res, next) => postController.updateCompleteGoals(req, res, next));
router.delete('/:id', auth_middleware_1.verifyUser, (req, res, next) => postController.deletePost(req, res, next));
exports.default = router;
