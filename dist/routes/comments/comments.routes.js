"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = require("express");
const auth_middleware_1 = require("../../middleware/auth.middleware");
const comment_repository_1 = require("../../repositories/comment.repository");
const post_repository_1 = require("../../repositories/post.repository");
const comment_controller_1 = __importDefault(require("../../controllers/comment.controller"));
const create_service_1 = __importDefault(require("../../services/comments/create.service"));
const create_reply_service_1 = __importDefault(require("../../services/comments/create-reply.service"));
const update_service_1 = __importDefault(require("../../services/comments/update.service"));
const delete_service_1 = __importDefault(require("../../services/comments/delete.service"));
const get_all_service_1 = __importDefault(require("../../services/comments/get-all.service"));
const get_all_reply_service_1 = __importDefault(require("../../services/comments/get-all-reply.service"));
const router = (0, express_1.Router)();
const commentRepository = new comment_repository_1.CommentRepository();
const postRepository = new post_repository_1.PostRepository();
const getAllComment = new get_all_service_1.default(commentRepository);
const getOneComment = new get_all_reply_service_1.default(commentRepository);
const createComment = new create_service_1.default(commentRepository, postRepository);
const createReplyComment = new create_reply_service_1.default(commentRepository, postRepository);
const updateComment = new update_service_1.default(commentRepository);
const deleteComment = new delete_service_1.default(commentRepository, postRepository);
const commentController = new comment_controller_1.default(getAllComment, getOneComment, createComment, createReplyComment, updateComment, deleteComment);
router.get('/:postId', auth_middleware_1.verifyUser, (req, res, next) => commentController.getAllComment(req, res, next));
router.get('/:id/reply', auth_middleware_1.verifyUser, (req, res, next) => commentController.getAllReply(req, res, next));
router.post('/', auth_middleware_1.verifyUser, (req, res, next) => commentController.createComment(req, res, next));
router.post('/reply', auth_middleware_1.verifyUser, (req, res, next) => commentController.createReplyComment(req, res, next));
router.patch('/:id', auth_middleware_1.verifyUser, (req, res, next) => commentController.updateComment(req, res, next));
router.delete('/:id', auth_middleware_1.verifyUser, (req, res, next) => commentController.deleteComment(req, res, next));
exports.default = router;
